{"ast":null,"code":"import { API_BASE_URL } from \"../app-config.js\";\nconst ACCESS_TOKEN = 'ACCESS_TOKEN';\nexport function call(api, method, request) {\n  let headers = new Headers({\n    \"Content-Type\": \"application/json\"\n  }); // 로컬 스토리지에서 ACCESS_TOKEN 가져오기\n\n  const accessToken = localStorage.getItem(ACCESS_TOKEN);\n\n  if (accessToken && accessToken != null) {\n    headers.append(\"Authorization\", \"Bearer \" + accessToken);\n  }\n\n  let options = {\n    headers: headers,\n    url: API_BASE_URL + api,\n    method: method\n  };\n\n  if (request) {\n    // GET method\n    options.body = JSON.stringify(request);\n  }\n\n  return fetch(options.url, options).then(response => // fetch 호출했기에 promise타입이 호출됨.\n  response.json().then(json => {\n    if (!response.ok) {\n      // response.ok 가 true이면 정상적인 응답을 받은 것이고\n      // response.ok 가 false이면 에러 응답을 받은 것임\n      return Promise.reject(json);\n    }\n\n    return json;\n  })).catch(error => {\n    // 추가된 부분\n    console.log('에러발생: ', error.status);\n\n    if (error.status === 403) {\n      window.location.href = \"/login\"; // redirect\n    }\n\n    return Promise.reject(error);\n  });\n}\nexport function signin(userDTO) {\n  return call(\"/auth/signin\", \"POST\", userDTO).then(response => {\n    // console.log(\"response : \", response);\n    // alert(\"로그인 토큰 : \" + response.token);\n    console.log('로그인 성공');\n\n    if (response.token) {\n      // 로컬 스토리지에 토큰 저장\n      localStorage.setItem(\"ACCESS_TOKEN\", response.token); //token이 존재하는 경우 Todo 화면으로 리디렉트\n\n      window.location.href = \"/\";\n    }\n  });\n}\nexport function signup(userDTO) {\n  return call(\"/auth/signup\", \"POST\", userDTO);\n}\nexport function signout() {\n  localStorage.setItem(ACCESS_TOKEN, null);\n  window.location.href = \"/login\";\n}","map":{"version":3,"sources":["/Users/jeonsumin/Desktop/2022-1/웹프/Shoppingmall_termproject_react/shoppingmall-react-app/src/service/ApiService.js"],"names":["API_BASE_URL","ACCESS_TOKEN","call","api","method","request","headers","Headers","accessToken","localStorage","getItem","append","options","url","body","JSON","stringify","fetch","then","response","json","ok","Promise","reject","catch","error","console","log","status","window","location","href","signin","userDTO","token","setItem","signup","signout"],"mappings":"AAAA,SAASA,YAAT,QAA6B,kBAA7B;AACA,MAAMC,YAAY,GAAG,cAArB;AAEA,OAAO,SAASC,IAAT,CAAcC,GAAd,EAAmBC,MAAnB,EAA2BC,OAA3B,EAAoC;AAEvC,MAAIC,OAAO,GAAG,IAAIC,OAAJ,CAAY;AACtB,oBAAiB;AADK,GAAZ,CAAd,CAFuC,CAMvC;;AACA,QAAMC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqBT,YAArB,CAApB;;AACA,MAAIO,WAAW,IAAIA,WAAW,IAAI,IAAlC,EAAuC;AACnCF,IAAAA,OAAO,CAACK,MAAR,CAAe,eAAf,EAAgC,YAAYH,WAA5C;AACH;;AAED,MAAII,OAAO,GAAG;AACVN,IAAAA,OAAO,EAAGA,OADA;AAEVO,IAAAA,GAAG,EAAGb,YAAY,GAAGG,GAFX;AAGVC,IAAAA,MAAM,EAAGA;AAHC,GAAd;;AAMA,MAAIC,OAAJ,EAAa;AACT;AACAO,IAAAA,OAAO,CAACE,IAAR,GAAeC,IAAI,CAACC,SAAL,CAAeX,OAAf,CAAf;AACH;;AAED,SAAOY,KAAK,CAACL,OAAO,CAACC,GAAT,EAAcD,OAAd,CAAL,CACNM,IADM,CACAC,QAAD,IAAc;AAChBA,EAAAA,QAAQ,CAACC,IAAT,GAAgBF,IAAhB,CAAsBE,IAAD,IAAU;AAC3B,QAAG,CAACD,QAAQ,CAACE,EAAb,EAAiB;AACb;AACA;AACA,aAAOC,OAAO,CAACC,MAAR,CAAeH,IAAf,CAAP;AACH;;AACD,WAAOA,IAAP;AACH,GAPD,CAFG,EAULI,KAVK,CAUEC,KAAD,IAAW;AACf;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,KAAK,CAACG,MAA5B;;AACA,QAAIH,KAAK,CAACG,MAAN,KAAiB,GAArB,EAA0B;AACtBC,MAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,QAAvB,CADsB,CACW;AACpC;;AACD,WAAOT,OAAO,CAACC,MAAR,CAAeE,KAAf,CAAP;AACH,GAjBM,CAAP;AAkBH;AAEG,OAAO,SAASO,MAAT,CAAgBC,OAAhB,EAAyB;AAC5B,SAAO/B,IAAI,CAAC,cAAD,EAAiB,MAAjB,EAAyB+B,OAAzB,CAAJ,CACFf,IADE,CACIC,QAAD,IAAc;AAChB;AACA;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;;AACA,QAAIR,QAAQ,CAACe,KAAb,EAAoB;AAChB;AACAzB,MAAAA,YAAY,CAAC0B,OAAb,CAAqB,cAArB,EAAqChB,QAAQ,CAACe,KAA9C,EAFgB,CAGhB;;AACAL,MAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,GAAvB;AACH;AACJ,GAXE,CAAP;AAYH;AAED,OAAO,SAASK,MAAT,CAAgBH,OAAhB,EAAyB;AAC5B,SAAO/B,IAAI,CAAC,cAAD,EAAiB,MAAjB,EAAyB+B,OAAzB,CAAX;AACH;AAED,OAAO,SAASI,OAAT,GAAmB;AACtB5B,EAAAA,YAAY,CAAC0B,OAAb,CAAqBlC,YAArB,EAAmC,IAAnC;AACA4B,EAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,QAAvB;AACH","sourcesContent":["import { API_BASE_URL } from \"../app-config.js\";\nconst ACCESS_TOKEN = 'ACCESS_TOKEN';\n\nexport function call(api, method, request) {\n\n    let headers = new Headers({\n        \"Content-Type\" : \"application/json\"\n    });\n\n    // 로컬 스토리지에서 ACCESS_TOKEN 가져오기\n    const accessToken = localStorage.getItem(ACCESS_TOKEN);\n    if (accessToken && accessToken != null){\n        headers.append(\"Authorization\", \"Bearer \" + accessToken)\n    }\n\n    let options = {\n        headers : headers,\n        url : API_BASE_URL + api,\n        method : method,\n    };\n\n    if (request) {\n        // GET method\n        options.body = JSON.stringify(request);\n    }\n\n    return fetch(options.url, options)\n    .then((response) => // fetch 호출했기에 promise타입이 호출됨.\n        response.json().then((json) => {\n            if(!response.ok) {\n                // response.ok 가 true이면 정상적인 응답을 받은 것이고\n                // response.ok 가 false이면 에러 응답을 받은 것임\n                return Promise.reject(json);\n            }\n            return json;\n        })\n    ).catch((error) => {\n        // 추가된 부분\n        console.log('에러발생: ', error.status);\n        if (error.status === 403) {\n            window.location.href = \"/login\"; // redirect\n        }\n        return Promise.reject(error);\n    });\n}\n    \n    export function signin(userDTO) {\n        return call(\"/auth/signin\", \"POST\", userDTO)\n            .then((response) => {\n                // console.log(\"response : \", response);\n                // alert(\"로그인 토큰 : \" + response.token);\n                console.log('로그인 성공')\n                if (response.token) {\n                    // 로컬 스토리지에 토큰 저장\n                    localStorage.setItem(\"ACCESS_TOKEN\", response.token);\n                    //token이 존재하는 경우 Todo 화면으로 리디렉트\n                    window.location.href = \"/\";\n                }\n            });\n    }\n    \n    export function signup(userDTO) {\n        return call(\"/auth/signup\", \"POST\", userDTO);\n    }\n    \n    export function signout() {\n        localStorage.setItem(ACCESS_TOKEN, null);\n        window.location.href = \"/login\"\n    }"]},"metadata":{},"sourceType":"module"}